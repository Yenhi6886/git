// src/pages/admin/AdminHome.jsx
// Admin UI (green & white): Qu·∫£n l√Ω Ng∆∞·ªùi d√πng ‚Ä¢ S·∫£n ph·∫©m ‚Ä¢ ƒê∆°n h√†ng
// - Header, Sidebar c√≥ th·ªÉ ·∫©n/hi·ªán b·∫±ng n√∫t (desktop) + Drawer (mobile)
// - Footer lu√¥n ·ªü cu·ªëi trang
// - Mock h√†nh ƒë·ªông: kh√≥a/m·ªü user, ·∫©n/x√≥a m·ªÅm s·∫£n ph·∫©m, c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n
// C√°ch d√πng: <Route path="/admin" element={<AdminHome />} />

import { useMemo, useState } from "react";

/* --------------------------------- Helpers -------------------------------- */
const money = (n) => n.toLocaleString("vi-VN", { style: "currency", currency: "VND" });

function Toast({ msg, onClose }) {
  if (!msg) return null;
  return (
    <div className="fixed top-4 right-4 z-50 max-w-sm rounded-xl border border-green-200 bg-white px-4 py-3 shadow-lg">
      <div className="flex items-start gap-3">
        <span className="mt-0.5 text-xl">‚úÖ</span>
        <div className="text-sm">
          <p className="font-semibold text-green-800">Th√†nh c√¥ng</p>
          <p className="text-gray-700">{msg}</p>
        </div>
        <button onClick={onClose} className="ml-auto text-gray-400 hover:text-gray-600" aria-label="ƒê√≥ng">‚úï</button>
      </div>
    </div>
  );
}

/* ------------------------------- Sidebar Nav ------------------------------- */
function SidebarNav({ tab, setTab, stats, onItemClick }) {
  const Item = ({ value, label, badge }) => (
    <li>
      <button
        onClick={() => {
          setTab(value);
          onItemClick && onItemClick();
        }}
        className={`w-full rounded-xl px-3 py-2 text-left transition hover:bg-green-50 ${tab === value ? "bg-green-600 text-white hover:bg-green-600" : ""}`}
      >
        {label}
        {typeof badge !== "undefined" && (
          <span className="ml-2 rounded-full bg-green-50 px-2 py-0.5 text-xs text-green-700">{badge}</span>
        )}
      </button>
    </li>
  );

  return (
    <ul className="space-y-1 text-sm">
      <Item value="dashboard" label="üìä T·ªïng quan" />
      <Item value="users" label="üë• Ng∆∞·ªùi d√πng" badge={stats.users} />
      <Item value="products" label="üõí S·∫£n ph·∫©m" badge={stats.products} />
      <Item value="orders" label="üì¶ ƒê∆°n h√†ng" badge={stats.orders} />
    </ul>
  );
}

/* ---------------------------------- App ----------------------------------- */
export default function AdminHome() {
  const [tab, setTab] = useState("dashboard"); // dashboard | users | products | orders
  const [toast, setToast] = useState("");

  // Toggle sidebar
  const [isSidebarOpen, setIsSidebarOpen] = useState(true); // desktop
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);   // mobile

  // Mock Users
  const [users, setUsers] = useState([
    { id: 1, fullName: "Alice Nguyen", email: "alice@shop.vn", phone: "0901 234 567", status: "ACTIVE" },
    { id: 2, fullName: "Bob Tran", email: "bob@shop.vn", phone: "0902 345 678", status: "LOCKED" },
    { id: 3, fullName: "Charlie Le", email: "charlie@shop.vn", phone: "0903 456 789", status: "ACTIVE" },
  ]);

  // Mock Products
  const [products, setProducts] = useState([
    { id: 101, name: "√Åo thun basic", price: 120000, stock: 50, status: "ACTIVE", isDeleted: false },
    { id: 102, name: "Qu·∫ßn jeans xanh", price: 420000, stock: 0, status: "OUT_OF_STOCK", isDeleted: false },
    { id: 103, name: "√Åo s∆° mi tr·∫Øng", price: 320000, stock: 12, status: "HIDDEN", isDeleted: false },
  ]);

  // Mock Orders
  const [orders, setOrders] = useState([
    { id: 2001, code: "ODR-0001", customer: "alice@shop.vn", total: 540000, status: "PENDING" },
    { id: 2002, code: "ODR-0002", customer: "bob@shop.vn", total: 120000, status: "PAID" },
    { id: 2003, code: "ODR-0003", customer: "charlie@shop.vn", total: 320000, status: "SHIPPED" },
  ]);

  const stats = useMemo(() => ({
    users: users.length,
    products: products.filter(p => !p.isDeleted).length,
    hidden: products.filter(p => p.status === "HIDDEN" && !p.isDeleted).length,
    outOfStock: products.filter(p => p.stock === 0 && !p.isDeleted).length,
    orders: orders.length,
    pending: orders.filter(o => o.status === "PENDING").length,
  }), [users, products, orders]);

  /* ------------------------------- User Actions ------------------------------ */
  const toggleLockUser = (id) => {
    setUsers(prev => prev.map(u => u.id === id ? { ...u, status: u.status === "LOCKED" ? "ACTIVE" : "LOCKED" } : u));
    setToast("C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n th√†nh c√¥ng.");
  };

  /* ----------------------------- Product Actions ----------------------------- */
  const toggleHideProduct = (id) => {
    setProducts(prev => prev.map(p => p.id === id ? { ...p, status: p.status === "HIDDEN" ? "ACTIVE" : "HIDDEN" } : p));
    setToast("C·∫≠p nh·∫≠t hi·ªÉn th·ªã s·∫£n ph·∫©m th√†nh c√¥ng.");
  };
  const softDeleteProduct = (id) => {
    setProducts(prev => prev.map(p => p.id === id ? { ...p, isDeleted: true } : p));
    setToast("ƒê√£ ·∫©n (x√≥a m·ªÅm) s·∫£n ph·∫©m vi ph·∫°m.");
  };
  const restoreProduct = (id) => {
    setProducts(prev => prev.map(p => p.id === id ? { ...p, isDeleted: false, status: "ACTIVE" } : p));
    setToast("Kh√¥i ph·ª•c s·∫£n ph·∫©m th√†nh c√¥ng.");
  };

  /* ------------------------------- Order Actions ----------------------------- */
  const nextOrder = (status) => {
    switch (status) {
      case "PENDING": return "PAID";
      case "PAID": return "SHIPPED";
      case "SHIPPED": return "COMPLETED";
      default: return status;
    }
  };
  const advanceOrder = (id) => {
    setOrders(prev => prev.map(o => o.id === id ? { ...o, status: nextOrder(o.status) } : o));
    setToast("C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng.");
  };
  const cancelOrder = (id) => {
    setOrders(prev => prev.map(o => o.id === id ? { ...o, status: "CANCELLED" } : o));
    setToast("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy.");
  };

  /* --------------------------------- Layout --------------------------------- */
  return (
    // Layout: flex-col + flex-1 ƒë·ªÉ footer lu√¥n ·ªü ƒë√°y; sidebar toggle ƒë∆∞·ª£c
    <div className="min-h-screen flex flex-col bg-white text-gray-900">
      <Toast msg={toast} onClose={() => setToast("")} />

      {/* Header */}
 <Header />

      {/* Content wrapper (grow ƒë·ªÉ ƒë·∫©y footer xu·ªëng cu·ªëi) */}
      <div className="mx-auto flex w-full max-w-7xl flex-1 gap-4 px-4 py-6">
        {/* Sidebar - Desktop (·∫©n/hi·ªán) */}
        {isSidebarOpen && (
          <aside className="hidden w-64 shrink-0 md:block">
            <nav className="sticky top-20 rounded-2xl border bg-white p-3 shadow-sm">
              <SidebarNav tab={tab} setTab={setTab} stats={stats} />
            </nav>
          </aside>
        )}

        {/* Main */}
        <main className="flex-1 space-y-4">
          {tab === "dashboard" && (
            <section className="space-y-4">
              <div className="grid gap-4 md:grid-cols-3">
                <div className="rounded-2xl border bg-white p-4 shadow-sm">
                  <p className="text-sm text-gray-500">Ng∆∞·ªùi d√πng</p>
                  <p className="mt-1 text-2xl font-semibold">{stats.users}</p>
                </div>
                <div className="rounded-2xl border bg-white p-4 shadow-sm">
                  <p className="text-sm text-gray-500">S·∫£n ph·∫©m</p>
                  <p className="mt-1 text-2xl font-semibold">{stats.products}</p>
                  <p className="text-xs text-gray-500">·∫®n: {stats.hidden} ‚Ä¢ H·∫øt h√†ng: {stats.outOfStock}</p>
                </div>
                <div className="rounded-2xl border bg-white p-4 shadow-sm">
                  <p className="text-sm text-gray-500">ƒê∆°n h√†ng</p>
                  <p className="mt-1 text-2xl font-semibold">{stats.orders}</p>
                  <p className="text-xs text-gray-500">Ch·ªù x·ª≠ l√Ω: {stats.pending}</p>
                </div>
              </div>

              <div className="rounded-2xl border bg-white p-4 shadow-sm">
                <h2 className="mb-3 text-lg font-semibold">Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</h2>
                <ul className="list-disc space-y-1 pl-5 text-sm text-gray-600">
                  <li>Kh√≥a t√†i kho·∫£n Bob Tran.</li>
                  <li>·∫®n s·∫£n ph·∫©m "√Åo s∆° mi tr·∫Øng" do vi ph·∫°m m√¥ t·∫£.</li>
                  <li>ƒê∆°n ODR-0003 chuy·ªÉn sang tr·∫°ng th√°i SHIPPED.</li>
                </ul>
              </div>
            </section>
          )}

          {tab === "users" && (
            <section className="rounded-2xl border bg-white p-4 shadow-sm">
              <div className="mb-4 flex items-end justify-between gap-2">
                <div>
                  <h2 className="text-lg font-semibold">Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h2>
                  <p className="text-sm text-gray-500">Kh√≥a / m·ªü t√†i kho·∫£n.</p>
                </div>
                <div className="rounded-xl bg-green-50 px-3 py-1 text-sm text-green-700">T·ªïng: {users.length}</div>
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full text-left text-sm">
                  <thead>
                    <tr className="border-b bg-green-50 text-gray-700">
                      <th className="px-3 py-2">#</th>
                      <th className="px-3 py-2">H·ªç t√™n</th>
                      <th className="px-3 py-2">Email</th>
                      <th className="px-3 py-2">ƒêi·ªán tho·∫°i</th>
                      <th className="px-3 py-2">Tr·∫°ng th√°i</th>
                      <th className="px-3 py-2 text-right">H√†nh ƒë·ªông</th>
                    </tr>
                  </thead>
                  <tbody>
                    {users.map(u => (
                      <tr key={u.id} className="border-b last:border-0">
                        <td className="px-3 py-2">{u.id}</td>
                        <td className="px-3 py-2 font-medium">{u.fullName}</td>
                        <td className="px-3 py-2">{u.email}</td>
                        <td className="px-3 py-2">{u.phone || "‚Äî"}</td>
                        <td className="px-3 py-2">
                          <span className={`rounded-full px-2 py-0.5 text-xs ${u.status === "ACTIVE" ? "bg-green-100 text-green-700" : u.status === "LOCKED" ? "bg-yellow-100 text-yellow-700" : "bg-red-100 text-red-700"}`}>
                            {u.status}
                          </span>
                        </td>
                        <td className="px-3 py-2 text-right">
                          <button onClick={() => toggleLockUser(u.id)} className="rounded-xl border px-3 py-1.5 text-xs hover:bg-green-50">
                            {u.status === "LOCKED" ? "M·ªü kh√≥a" : "Kh√≥a"}
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </section>
          )}

          {tab === "products" && (
            <section className="rounded-2xl border bg-white p-4 shadow-sm">
              <div className="mb-4 flex items-end justify-between gap-2">
                <div>
                  <h2 className="text-lg font-semibold">Qu·∫£n l√Ω s·∫£n ph·∫©m</h2>
                  <p className="text-sm text-gray-500">·∫®n / x√≥a m·ªÅm s·∫£n ph·∫©m vi ph·∫°m.</p>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <span className="rounded-xl bg-green-50 px-3 py-1 text-green-700">Hi·ªán: {products.filter(p => !p.isDeleted).length}</span>
                  <span className="rounded-xl bg-green-50 px-3 py-1 text-green-700">ƒê√£ ·∫©n: {products.filter(p => p.isDeleted).length}</span>
                </div>
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full text-left text-sm">
                  <thead>
                    <tr className="border-b bg-green-50 text-gray-700">
                      <th className="px-3 py-2">#</th>
                      <th className="px-3 py-2">T√™n</th>
                      <th className="px-3 py-2">Gi√°</th>
                      <th className="px-3 py-2">T·ªìn</th>
                      <th className="px-3 py-2">Tr·∫°ng th√°i</th>
                      <th className="px-3 py-2">X√≥a m·ªÅm</th>
                      <th className="px-3 py-2 text-right">H√†nh ƒë·ªông</th>
                    </tr>
                  </thead>
                  <tbody>
                    {products.map(p => (
                      <tr key={p.id} className={`border-b last:border-0 ${p.isDeleted ? "opacity-50" : ""}`}>
                        <td className="px-3 py-2">{p.id}</td>
                        <td className="px-3 py-2 font-medium">{p.name}</td>
                        <td className="px-3 py-2">{money(p.price)}</td>
                        <td className="px-3 py-2">{p.stock}</td>
                        <td className="px-3 py-2">
                          <span className={`rounded-full px-2 py-0.5 text-xs ${p.status === "ACTIVE" ? "bg-green-100 text-green-700" : p.status === "OUT_OF_STOCK" ? "bg-yellow-100 text-yellow-700" : p.status === "HIDDEN" ? "bg-gray-100 text-gray-700" : "bg-red-100 text-red-700"}`}>
                            {p.status}
                          </span>
                        </td>
                        <td className="px-3 py-2">{p.isDeleted ? "ƒê√£ ·∫©n" : "‚Äî"}</td>
                        <td className="px-3 py-2 text-right">
                          <div className="inline-flex gap-2">
                            <button onClick={() => toggleHideProduct(p.id)} className="rounded-xl border px-3 py-1.5 text-xs hover:bg-green-50">
                              {p.status === "HIDDEN" ? "B·ªè ·∫©n" : "·∫®n"}
                            </button>
                            {!p.isDeleted ? (
                              <button onClick={() => softDeleteProduct(p.id)} className="rounded-xl border px-3 py-1.5 text-xs text-green-700 hover:bg-green-50">
                                X√≥a (·∫©n)
                              </button>
                            ) : (
                              <button onClick={() => restoreProduct(p.id)} className="rounded-xl border px-3 py-1.5 text-xs hover:bg-green-50">
                                Kh√¥i ph·ª•c
                              </button>
                            )}
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </section>
          )}

          {tab === "orders" && (
            <section className="rounded-2xl border bg-white p-4 shadow-sm">
              <div className="mb-4">
                <h2 className="text-lg font-semibold">Qu·∫£n l√Ω ƒë∆°n h√†ng</h2>
                <p className="text-sm text-gray-500">Xem & c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n.</p>
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full text-left text-sm">
                  <thead>
                    <tr className="border-b bg-green-50 text-gray-700">
                      <th className="px-3 py-2">M√£</th>
                      <th className="px-3 py-2">Kh√°ch</th>
                      <th className="px-3 py-2">T·ªïng</th>
                      <th className="px-3 py-2">Tr·∫°ng th√°i</th>
                      <th className="px-3 py-2 text-right">H√†nh ƒë·ªông</th>
                    </tr>
                  </thead>
                  <tbody>
                    {orders.map(o => (
                      <tr key={o.id} className="border-b last:border-0">
                        <td className="px-3 py-2 font-medium">{o.code}</td>
                        <td className="px-3 py-2">{o.customer}</td>
                        <td className="px-3 py-2">{money(o.total)}</td>
                        <td className="px-3 py-2">
                          <span className={`rounded-full px-2 py-0.5 text-xs ${o.status === "PENDING" ? "bg-yellow-100 text-yellow-700" : o.status === "PAID" ? "bg-blue-100 text-blue-700" : o.status === "SHIPPED" ? "bg-indigo-100 text-indigo-700" : o.status === "COMPLETED" ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700"}`}>
                            {o.status}
                          </span>
                        </td>
                        <td className="px-3 py-2 text-right">
                          <div className="inline-flex flex-wrap gap-2">
                            {o.status === "PENDING" && (
                              <>
                                <button onClick={() => advanceOrder(o.id)} className="rounded-xl border px-3 py-1.5 text-xs hover:bg-green-50">ƒê√£ thanh to√°n</button>
                                <button onClick={() => cancelOrder(o.id)} className="rounded-xl border px-3 py-1.5 text-xs text-green-700 hover:bg-green-50">H·ªßy</button>
                              </>
                            )}
                            {o.status === "PAID" && (
                              <button onClick={() => advanceOrder(o.id)} className="rounded-xl border px-3 py-1.5 text-xs hover:bg-green-50">Giao h√†ng</button>
                            )}
                            {o.status === "SHIPPED" && (
                              <button onClick={() => advanceOrder(o.id)} className="rounded-xl border px-3 py-1.5 text-xs hover:bg-green-50">Ho√†n t·∫•t</button>
                            )}
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </section>
          )}
        </main>
      </div>

      {/* Drawer Sidebar - Mobile */}
      {isDrawerOpen && (
        <div className="fixed inset-0 z-40 md:hidden" role="dialog" aria-modal="true">
          <div className="absolute inset-0 bg-black/30" onClick={() => setIsDrawerOpen(false)} />
          <aside className="absolute left-0 top-0 h-full w-72 overflow-y-auto rounded-r-2xl border-r bg-white p-3 shadow-xl">
            <div className="mb-2 flex items-center justify-between">
              <div className="flex items-center gap-2">
                <div className="flex h-8 w-8 items-center justify-center rounded-lg bg-green-600 text-white">A</div>
                <span className="text-sm font-semibold">Clothing Admin</span>
              </div>
              <button className="rounded-lg border px-2 py-1 text-sm hover:bg-green-50" onClick={() => setIsDrawerOpen(false)} aria-label="ƒê√≥ng menu">‚úï</button>
            </div>
            <nav className="pt-2">
              <SidebarNav tab={tab} setTab={setTab} stats={stats} onItemClick={() => setIsDrawerOpen(false)} />
            </nav>
          </aside>
        </div>
      )}

      {/* Footer lu√¥n ·ªü cu·ªëi */}
      <Footer />
    </div>
  );
}
